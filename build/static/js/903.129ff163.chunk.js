"use strict";(self.webpackChunktracker=self.webpackChunktracker||[]).push([[903],{2903:(a,t,e)=>{e.d(t,{initializeDatabase:()=>b,seedLocalDynamo:()=>w});var n=e(2555),o=e(5806),s=e(2631),r=e(7949),i=e(5611),c=e(7426);const d=[{PK:"U-12345",FirstName:"Ellis",LastName:"Taylor",AnnualGross:48e3,Pension:1450,NationalIns:5e3},{PK:"U-67890",FirstName:"Sarah",LastName:"Johnson",AnnualGross:52e3,Pension:1560,NationalIns:5200},{PK:"U-11111",FirstName:"Michael",LastName:"Chen",AnnualGross:45e3,Pension:1350,NationalIns:4800}],l=[{PK:"G-001",Title:"Digital Health Innovation Project",StartDate:"2024-10-01",EndDate:"2025-09-30",ManagerUserID:"U-12345"},{PK:"G-002",Title:"AI Research Initiative",StartDate:"2024-12-01",EndDate:"2025-11-30",ManagerUserID:"U-67890"},{PK:"G-003",Title:"Sustainable Technology Development",StartDate:"2025-01-01",EndDate:"2025-12-31",ManagerUserID:"U-11111"},{PK:"G-004",Title:"Machine Learning Platform",StartDate:"2025-01-15",EndDate:"2025-06-30",ManagerUserID:"U-12345"},{PK:"G-005",Title:"Cloud Infrastructure Modernization",StartDate:"2025-02-01",EndDate:"2025-08-31",ManagerUserID:"U-67890"},{PK:"G-006",Title:"Data Analytics Enhancement",StartDate:"2025-01-01",EndDate:"2025-04-30",ManagerUserID:"U-11111"}],u=(a,t)=>{const e={};return(0,s.k)({start:a,end:t}).forEach((a=>{const t=(0,r.GP)(a,"yyyy-MM-dd");e[t]=!(0,i.c)(a)})),e},g=(a,t)=>{const e={};return(0,s.k)({start:a,end:t}).forEach((a=>{const t=(0,r.GP)(a,"yyyy-MM-dd");(0,i.c)(a)||(e[t]=o.yS)})),e},y=(a,t)=>{const e=[];return Object.keys(t).filter((a=>t[a])).forEach(((t,n)=>{const s=l.filter((a=>t>=a.StartDate&&t<=a.EndDate));if(0===s.length)return;const r=[()=>[{grantId:s[0].PK,percent:100,hours:8}],()=>s.length>=2?[{grantId:s[0].PK,percent:60,hours:4.8},{grantId:s[1].PK,percent:40,hours:3.2}]:[{grantId:s[0].PK,percent:100,hours:8}],()=>s.length>=3?[{grantId:s[0].PK,percent:50,hours:4},{grantId:s[1].PK,percent:30,hours:2.4},{grantId:s[2].PK,percent:20,hours:1.6}]:[{grantId:s[0].PK,percent:100,hours:8}],()=>[{grantId:s[0].PK,percent:75,hours:6}]];r[(n+new Date(t).getDay())%r.length]().forEach((n=>{e.push({PK:a,SK:(0,o.generateTimeSlotKey)(t,n.grantId),AllocationPercent:n.percent,HoursAllocated:n.hours,Date:t,GrantID:n.grantId,UserID:a})}))})),e},w=async()=>{try{console.log("Starting database seeding..."),await o.db.transaction("rw",[o.db.individuals,o.db.grants,o.db.workdays,o.db.workdayHours,o.db.timeslots],(async()=>{await o.db.individuals.clear(),await o.db.grants.clear(),await o.db.workdays.clear(),await o.db.workdayHours.clear(),await o.db.timeslots.clear()})),console.log("Seeding individuals...");for(const n of d)await o.db.individuals.put(n);console.log("Seeding grants...");for(const n of l)await o.db.grants.put(n);const a=new Date("2025-01-01"),t=(0,c.p)(a),e=new Date("2025-02-01"),s=(0,c.p)(e);console.log("Seeding workdays and time slots...");for(const c of d){const r=u(a,t),i=g(a,t),d=u(e,s),l=g(e,s),w=(0,n.A)((0,n.A)({},r),d),b=(0,n.A)((0,n.A)({},i),l);await o.db.workdays.put({PK:c.PK,SK:(0,o.YA)(c.PK,2025),Workdays:w}),await o.db.workdayHours.put({PK:c.PK,SK:(0,o.generateWorkdayHoursKey)(c.PK,2025),Hours:b});const h=y(c.PK,w);for(const a of h)await o.db.timeslots.put(a)}console.log("Database seeding completed successfully!"),console.log("Seeded ".concat(d.length," individuals, ").concat(l.length," grants"));const r=await o.db.timeslots.count(),i=await o.db.workdays.count();console.log("Generated ".concat(i," workday records and ").concat(r," time slot allocations"))}catch(a){throw console.error("Database seeding failed:",a),a}},b=async()=>{try{console.log("Initializing IndexedDB database..."),await o.db.open(),console.log("Database opened successfully");const a=await(async()=>{try{return 0===await o.db.individuals.count()}catch(a){return console.error("Error checking database state:",a),!0}})();if(console.log("Database empty check:",a),a)console.log("Database is empty, auto-seeding..."),await w();else{console.log("Database already contains data, skipping auto-seed");const a={individuals:await o.db.individuals.count(),grants:await o.db.grants.count(),workdays:await o.db.workdays.count(),workdayHours:await o.db.workdayHours.count(),timeslots:await o.db.timeslots.count()};console.log("Current database counts:",a)}}catch(a){console.error("Database initialization failed:",a),console.log("Attempting to seed database anyway...");try{await w()}catch(t){console.error("Seeding also failed:",t)}}}}}]);
//# sourceMappingURL=903.129ff163.chunk.js.map