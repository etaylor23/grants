{"version":3,"file":"static/js/903.277008df.chunk.js","mappings":"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","sources":["db/seedLocalDynamo.ts"],"sourcesContent":["import {\n  db,\n  Organisation,\n  Individual,\n  Grant,\n  Workday,\n  WorkdayHours,\n  TimeSlot,\n  generateWorkdayKey,\n  generateWorkdayHoursKey,\n  generateTimeSlotKey,\n  DEFAULT_WORKDAY_HOURS\n} from './schema';\nimport { format, eachDayOfInterval, isWeekend, startOfMonth, endOfMonth, addMonths, subMonths } from 'date-fns';\n\n// Realistic test data\nconst ORGANISATIONS: Organisation[] = [\n  {\n    PK: \"ORG-001\",\n    Name: \"Optimal Compliance Ltd\",\n    CompanyNumber: \"12345678\",\n    CreatedDate: \"2020-01-15T00:00:00.000Z\"\n  },\n  {\n    PK: \"ORG-002\",\n    Name: \"Innovation Research Partners\",\n    CompanyNumber: \"87654321\",\n    CreatedDate: \"2019-06-20T00:00:00.000Z\"\n  },\n  {\n    PK: \"ORG-003\",\n    Name: \"Digital Health Solutions\",\n    CompanyNumber: \"11223344\",\n    CreatedDate: \"2021-03-10T00:00:00.000Z\"\n  }\n];\n\nconst INDIVIDUALS: Individual[] = [\n  {\n    PK: \"U-12345\",\n    FirstName: \"Ellis\",\n    LastName: \"Taylor\",\n    AnnualGross: 48000,\n    Pension: 1450,\n    NationalIns: 5000,\n    OrganisationID: \"ORG-001\"\n  },\n  {\n    PK: \"U-67890\",\n    FirstName: \"Sarah\",\n    LastName: \"Johnson\",\n    AnnualGross: 52000,\n    Pension: 1560,\n    NationalIns: 5200,\n    OrganisationID: \"ORG-002\"\n  },\n  {\n    PK: \"U-11111\",\n    FirstName: \"Michael\",\n    LastName: \"Chen\",\n    AnnualGross: 45000,\n    Pension: 1350,\n    NationalIns: 4800,\n    OrganisationID: \"ORG-001\"\n  }\n];\n\n// Generate grants with dates relative to current month (June 2024)\nconst getCurrentMonthGrants = (): Grant[] => {\n  const now = new Date();\n  const currentMonth = startOfMonth(now);\n  const currentYear = now.getFullYear();\n  const currentMonthStr = format(currentMonth, 'yyyy-MM');\n\n  return [\n    {\n      PK: \"G-001\",\n      Title: \"Digital Health Innovation Project\",\n      StartDate: format(subMonths(currentMonth, 2), 'yyyy-MM-dd'), // 2 months ago\n      EndDate: format(addMonths(currentMonth, 10), 'yyyy-MM-dd'), // 10 months from now\n      ManagerUserID: \"U-12345\",\n      OrganisationID: \"ORG-003\"\n    },\n    {\n      PK: \"G-002\",\n      Title: \"AI Research Initiative\",\n      StartDate: format(currentMonth, 'yyyy-MM-dd'), // Current month start\n      EndDate: format(addMonths(currentMonth, 8), 'yyyy-MM-dd'), // 8 months from now\n      ManagerUserID: \"U-67890\",\n      OrganisationID: \"ORG-002\"\n    },\n    {\n      PK: \"G-003\",\n      Title: \"Sustainable Technology Development\",\n      StartDate: format(subMonths(currentMonth, 1), 'yyyy-MM-dd'), // 1 month ago\n      EndDate: format(addMonths(currentMonth, 6), 'yyyy-MM-dd'), // 6 months from now\n      ManagerUserID: \"U-11111\",\n      OrganisationID: \"ORG-001\"\n    },\n    {\n      PK: \"G-004\",\n      Title: \"Machine Learning Platform\",\n      StartDate: format(currentMonth, 'yyyy-MM-15'), // Mid current month\n      EndDate: format(addMonths(currentMonth, 3), 'yyyy-MM-dd'), // 3 months from now\n      ManagerUserID: \"U-12345\",\n      OrganisationID: \"ORG-001\"\n    },\n    {\n      PK: \"G-005\",\n      Title: \"Cloud Infrastructure Modernization\",\n      StartDate: format(currentMonth, 'yyyy-MM-01'), // Current month start\n      EndDate: format(addMonths(currentMonth, 4), 'yyyy-MM-dd'), // 4 months from now\n      ManagerUserID: \"U-67890\",\n      OrganisationID: \"ORG-002\"\n    },\n    {\n      PK: \"G-006\",\n      Title: \"Data Analytics Enhancement\",\n      StartDate: format(subMonths(currentMonth, 1), 'yyyy-MM-dd'), // 1 month ago\n      EndDate: format(addMonths(currentMonth, 2), 'yyyy-MM-dd'), // 2 months from now\n      ManagerUserID: \"U-11111\",\n      OrganisationID: \"ORG-001\"\n    }\n  ];\n};\n\nconst GRANTS: Grant[] = getCurrentMonthGrants();\n\n// Helper function to generate workdays for a date range (excluding weekends)\nconst generateWorkdaysForPeriod = (startDate: Date, endDate: Date): Record<string, boolean> => {\n  const workdays: Record<string, boolean> = {};\n  const days = eachDayOfInterval({ start: startDate, end: endDate });\n  \n  days.forEach(day => {\n    const dateStr = format(day, 'yyyy-MM-dd');\n    workdays[dateStr] = !isWeekend(day);\n  });\n  \n  return workdays;\n};\n\n// Helper function to generate workday hours for a date range\nconst generateWorkdayHoursForPeriod = (startDate: Date, endDate: Date): Record<string, number> => {\n  const hours: Record<string, number> = {};\n  const days = eachDayOfInterval({ start: startDate, end: endDate });\n  \n  days.forEach(day => {\n    const dateStr = format(day, 'yyyy-MM-dd');\n    if (!isWeekend(day)) {\n      hours[dateStr] = DEFAULT_WORKDAY_HOURS;\n    }\n  });\n  \n  return hours;\n};\n\n// Helper function to generate realistic time slot allocations\nconst generateTimeSlots = (userId: string, workdays: Record<string, boolean>): TimeSlot[] => {\n  const timeSlots: TimeSlot[] = [];\n  const workdayDates = Object.keys(workdays).filter(date => workdays[date]);\n  \n  // Generate allocations for each workday\n  workdayDates.forEach((date, index) => {\n    const grants = GRANTS.filter(g => date >= g.StartDate && date <= g.EndDate);\n    \n    if (grants.length === 0) return;\n    \n    // Create realistic allocation patterns\n    const patterns = [\n      // Full day on one grant\n      () => [{\n        grantId: grants[0].PK,\n        percent: 100,\n        hours: 8\n      }],\n      // Split between two grants\n      () => grants.length >= 2 ? [\n        { grantId: grants[0].PK, percent: 60, hours: 4.8 },\n        { grantId: grants[1].PK, percent: 40, hours: 3.2 }\n      ] : [{ grantId: grants[0].PK, percent: 100, hours: 8 }],\n      // Three-way split\n      () => grants.length >= 3 ? [\n        { grantId: grants[0].PK, percent: 50, hours: 4 },\n        { grantId: grants[1].PK, percent: 30, hours: 2.4 },\n        { grantId: grants[2].PK, percent: 20, hours: 1.6 }\n      ] : [{ grantId: grants[0].PK, percent: 100, hours: 8 }],\n      // Partial day (6 hours total)\n      () => [{\n        grantId: grants[0].PK,\n        percent: 75,\n        hours: 6\n      }]\n    ];\n    \n    // Choose pattern based on day of week and index for variety\n    const patternIndex = (index + new Date(date).getDay()) % patterns.length;\n    const allocations = patterns[patternIndex]();\n    \n    // Create time slots\n    allocations.forEach(allocation => {\n      timeSlots.push({\n        PK: userId,\n        SK: generateTimeSlotKey(date, allocation.grantId),\n        AllocationPercent: allocation.percent,\n        HoursAllocated: allocation.hours,\n        Date: date,\n        GrantID: allocation.grantId,\n        UserID: userId\n      });\n    });\n  });\n  \n  return timeSlots;\n};\n\n// Main seeding function\nexport const seedLocalDynamo = async (): Promise<void> => {\n  try {\n    console.log('Starting database seeding...');\n    \n    // Clear existing data\n    await db.transaction('rw', [db.organisations, db.individuals, db.grants, db.workdays, db.workdayHours, db.timeslots], async () => {\n      await db.organisations.clear();\n      await db.individuals.clear();\n      await db.grants.clear();\n      await db.workdays.clear();\n      await db.workdayHours.clear();\n      await db.timeslots.clear();\n    });\n\n    // Seed organisations\n    console.log('Seeding organisations...');\n    for (const organisation of ORGANISATIONS) {\n      await db.organisations.put(organisation);\n    }\n\n    // Seed individuals\n    console.log('Seeding individuals...');\n    for (const individual of INDIVIDUALS) {\n      await db.individuals.put(individual);\n    }\n\n    // Seed grants\n    console.log('Seeding grants...');\n    for (const grant of GRANTS) {\n      await db.grants.put(grant);\n    }\n    \n    // Generate date ranges for current month and surrounding months\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const currentMonthStart = startOfMonth(now);\n    const currentMonthEnd = endOfMonth(now);\n    const prevMonthStart = startOfMonth(subMonths(now, 1));\n    const prevMonthEnd = endOfMonth(subMonths(now, 1));\n    const nextMonthStart = startOfMonth(addMonths(now, 1));\n    const nextMonthEnd = endOfMonth(addMonths(now, 1));\n\n    // Seed workdays and time slots for each user\n    console.log('Seeding workdays and time slots...');\n    for (const individual of INDIVIDUALS) {\n      // Previous month\n      const prevMonthWorkdays = generateWorkdaysForPeriod(prevMonthStart, prevMonthEnd);\n      const prevMonthHours = generateWorkdayHoursForPeriod(prevMonthStart, prevMonthEnd);\n\n      // Current month\n      const currentMonthWorkdays = generateWorkdaysForPeriod(currentMonthStart, currentMonthEnd);\n      const currentMonthHours = generateWorkdayHoursForPeriod(currentMonthStart, currentMonthEnd);\n\n      // Next month\n      const nextMonthWorkdays = generateWorkdaysForPeriod(nextMonthStart, nextMonthEnd);\n      const nextMonthHours = generateWorkdayHoursForPeriod(nextMonthStart, nextMonthEnd);\n\n      // Merge all workdays and hours for current year\n      const allWorkdays = { ...prevMonthWorkdays, ...currentMonthWorkdays, ...nextMonthWorkdays };\n      const allHours = { ...prevMonthHours, ...currentMonthHours, ...nextMonthHours };\n\n      await db.workdays.put({\n        PK: individual.PK,\n        SK: generateWorkdayKey(individual.PK, currentYear),\n        Workdays: allWorkdays\n      } as Workday);\n\n      await db.workdayHours.put({\n        PK: individual.PK,\n        SK: generateWorkdayHoursKey(individual.PK, currentYear),\n        Hours: allHours\n      } as WorkdayHours);\n      \n      // Generate time slots\n      const timeSlots = generateTimeSlots(individual.PK, allWorkdays);\n      for (const timeSlot of timeSlots) {\n        await db.timeslots.put(timeSlot);\n      }\n    }\n    \n    console.log('Database seeding completed successfully!');\n    console.log(`Seeded ${ORGANISATIONS.length} organisations, ${INDIVIDUALS.length} individuals, ${GRANTS.length} grants`);\n\n    // Log summary\n    const totalTimeSlots = await db.timeslots.count();\n    const totalWorkdays = await db.workdays.count();\n    const totalOrganisations = await db.organisations.count();\n    console.log(`Generated ${totalOrganisations} organisations, ${totalWorkdays} workday records and ${totalTimeSlots} time slot allocations`);\n    \n  } catch (error) {\n    console.error('Database seeding failed:', error);\n    throw error;\n  }\n};\n\n// Function to check if database needs seeding\nexport const isDatabaseEmpty = async (): Promise<boolean> => {\n  try {\n    const individualCount = await db.individuals.count();\n    return individualCount === 0;\n  } catch (error) {\n    console.error('Error checking database state:', error);\n    return true;\n  }\n};\n\n// Auto-seed on first load\nexport const initializeDatabase = async (): Promise<void> => {\n  try {\n    console.log('Initializing IndexedDB database...');\n\n    // Ensure database is open\n    await db.open();\n    console.log('Database opened successfully');\n\n    const isEmpty = await isDatabaseEmpty();\n    console.log('Database empty check:', isEmpty);\n\n    if (isEmpty) {\n      console.log('Database is empty, auto-seeding...');\n      await seedLocalDynamo();\n    } else {\n      console.log('Database already contains data, skipping auto-seed');\n      // Log current counts for debugging\n      const counts = {\n        organisations: await db.organisations.count(),\n        individuals: await db.individuals.count(),\n        grants: await db.grants.count(),\n        workdays: await db.workdays.count(),\n        workdayHours: await db.workdayHours.count(),\n        timeslots: await db.timeslots.count(),\n      };\n      console.log('Current database counts:', counts);\n    }\n  } catch (error) {\n    console.error('Database initialization failed:', error);\n    // Try to seed anyway\n    console.log('Attempting to seed database anyway...');\n    try {\n      await seedLocalDynamo();\n    } catch (seedError) {\n      console.error('Seeding also failed:', seedError);\n    }\n  }\n};\n"],"names":["ORGANISATIONS","PK","Name","CompanyNumber","CreatedDate","INDIVIDUALS","FirstName","LastName","AnnualGross","Pension","NationalIns","OrganisationID","GRANTS","getCurrentMonthGrants","now","Date","currentMonth","startOfMonth","getFullYear","format","Title","StartDate","subMonths","EndDate","addMonths","ManagerUserID","generateWorkdaysForPeriod","startDate","endDate","workdays","eachDayOfInterval","start","end","forEach","day","dateStr","isWeekend","generateWorkdayHoursForPeriod","hours","DEFAULT_WORKDAY_HOURS","generateTimeSlots","userId","timeSlots","Object","keys","filter","date","index","grants","g","length","patterns","grantId","percent","getDay","allocation","push","SK","generateTimeSlotKey","AllocationPercent","HoursAllocated","GrantID","UserID","seedLocalDynamo","async","console","log","db","transaction","organisations","individuals","workdayHours","timeslots","clear","organisation","put","individual","grant","currentYear","currentMonthStart","currentMonthEnd","endOfMonth","prevMonthStart","prevMonthEnd","nextMonthStart","nextMonthEnd","prevMonthWorkdays","prevMonthHours","currentMonthWorkdays","currentMonthHours","nextMonthWorkdays","nextMonthHours","allWorkdays","_objectSpread","allHours","generateWorkdayKey","Workdays","generateWorkdayHoursKey","Hours","timeSlot","concat","totalTimeSlots","count","totalWorkdays","totalOrganisations","error","initializeDatabase","open","isEmpty","isDatabaseEmpty","counts","seedError"],"sourceRoot":""}