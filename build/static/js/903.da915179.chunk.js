"use strict";(self.webpackChunktracker=self.webpackChunktracker||[]).push([[903],{2903:(a,t,e)=>{e.d(t,{initializeDatabase:()=>M,seedLocalDynamo:()=>h});var n=e(7051),o=e(5806),s=e(2275),r=e(9817),i=e(2907),d=e(9287),c=e(2631),l=e(5611),y=e(7426);const g=[{PK:"ORG-001",Name:"Optimal Compliance Ltd",CompanyNumber:"12345678",CreatedDate:"2020-01-15T00:00:00.000Z"},{PK:"ORG-002",Name:"Innovation Research Partners",CompanyNumber:"87654321",CreatedDate:"2019-06-20T00:00:00.000Z"},{PK:"ORG-003",Name:"Digital Health Solutions",CompanyNumber:"11223344",CreatedDate:"2021-03-10T00:00:00.000Z"}],u=[{PK:"U-12345",FirstName:"Ellis",LastName:"Taylor",AnnualGross:48e3,Pension:1450,NationalIns:5e3,OrganisationID:"ORG-001"},{PK:"U-67890",FirstName:"Sarah",LastName:"Johnson",AnnualGross:52e3,Pension:1560,NationalIns:5200,OrganisationID:"ORG-002"},{PK:"U-11111",FirstName:"Michael",LastName:"Chen",AnnualGross:45e3,Pension:1350,NationalIns:4800,OrganisationID:"ORG-001"}],P=(()=>{const a=new Date,t=(0,s.w)(a);a.getFullYear(),(0,r.GP)(t,"yyyy-MM");return[{PK:"G-001",Title:"Digital Health Innovation Project",StartDate:(0,r.GP)((0,i.a)(t,2),"yyyy-MM-dd"),EndDate:(0,r.GP)((0,d.P)(t,10),"yyyy-MM-dd"),ManagerUserID:"U-12345",OrganisationID:"ORG-003"},{PK:"G-002",Title:"AI Research Initiative",StartDate:(0,r.GP)(t,"yyyy-MM-dd"),EndDate:(0,r.GP)((0,d.P)(t,8),"yyyy-MM-dd"),ManagerUserID:"U-67890",OrganisationID:"ORG-002"},{PK:"G-003",Title:"Sustainable Technology Development",StartDate:(0,r.GP)((0,i.a)(t,1),"yyyy-MM-dd"),EndDate:(0,r.GP)((0,d.P)(t,6),"yyyy-MM-dd"),ManagerUserID:"U-11111",OrganisationID:"ORG-001"},{PK:"G-004",Title:"Machine Learning Platform",StartDate:(0,r.GP)(t,"yyyy-MM-15"),EndDate:(0,r.GP)((0,d.P)(t,3),"yyyy-MM-dd"),ManagerUserID:"U-12345",OrganisationID:"ORG-001"},{PK:"G-005",Title:"Cloud Infrastructure Modernization",StartDate:(0,r.GP)(t,"yyyy-MM-01"),EndDate:(0,r.GP)((0,d.P)(t,4),"yyyy-MM-dd"),ManagerUserID:"U-67890",OrganisationID:"ORG-002"},{PK:"G-006",Title:"Data Analytics Enhancement",StartDate:(0,r.GP)((0,i.a)(t,1),"yyyy-MM-dd"),EndDate:(0,r.GP)((0,d.P)(t,2),"yyyy-MM-dd"),ManagerUserID:"U-11111",OrganisationID:"ORG-001"}]})(),D=(a,t)=>{const e={};return(0,c.k)({start:a,end:t}).forEach((a=>{const t=(0,r.GP)(a,"yyyy-MM-dd");e[t]=!(0,l.c)(a)})),e},w=(a,t)=>{const e={};return(0,c.k)({start:a,end:t}).forEach((a=>{const t=(0,r.GP)(a,"yyyy-MM-dd");(0,l.c)(a)||(e[t]=o.yS)})),e},b=(a,t)=>{const e=[];return Object.keys(t).filter((a=>t[a])).forEach(((t,n)=>{const s=P.filter((a=>t>=a.StartDate&&t<=a.EndDate));if(0===s.length)return;const r=[()=>[{grantId:s[0].PK,percent:100,hours:8}],()=>s.length>=2?[{grantId:s[0].PK,percent:60,hours:4.8},{grantId:s[1].PK,percent:40,hours:3.2}]:[{grantId:s[0].PK,percent:100,hours:8}],()=>s.length>=3?[{grantId:s[0].PK,percent:50,hours:4},{grantId:s[1].PK,percent:30,hours:2.4},{grantId:s[2].PK,percent:20,hours:1.6}]:[{grantId:s[0].PK,percent:100,hours:8}],()=>[{grantId:s[0].PK,percent:75,hours:6}]];r[(n+new Date(t).getDay())%r.length]().forEach((n=>{e.push({PK:a,SK:(0,o.generateTimeSlotKey)(t,n.grantId),AllocationPercent:n.percent,HoursAllocated:n.hours,Date:t,GrantID:n.grantId,UserID:a})}))})),e},h=async()=>{try{console.log("Starting database seeding..."),await o.db.transaction("rw",[o.db.organisations,o.db.individuals,o.db.grants,o.db.workdays,o.db.workdayHours,o.db.timeslots],(async()=>{await o.db.organisations.clear(),await o.db.individuals.clear(),await o.db.grants.clear(),await o.db.workdays.clear(),await o.db.workdayHours.clear(),await o.db.timeslots.clear()})),console.log("Seeding organisations...");for(const n of g)await o.db.organisations.put(n);console.log("Seeding individuals...");for(const n of u)await o.db.individuals.put(n);console.log("Seeding grants...");for(const n of P)await o.db.grants.put(n);const a=new Date,t=a.getFullYear(),e=(0,s.w)(a),r=(0,y.p)(a),c=(0,s.w)((0,i.a)(a,1)),l=(0,y.p)((0,i.a)(a,1)),h=(0,s.w)((0,d.P)(a,1)),M=(0,y.p)((0,d.P)(a,1));console.log("Seeding workdays and time slots...");for(const s of u){const a=D(c,l),i=w(c,l),d=D(e,r),y=w(e,r),g=D(h,M),u=w(h,M),P=(0,n.A)((0,n.A)((0,n.A)({},a),d),g),G=(0,n.A)((0,n.A)((0,n.A)({},i),y),u);await o.db.workdays.put({PK:s.PK,SK:(0,o.YA)(s.PK,t),Workdays:P}),await o.db.workdayHours.put({PK:s.PK,SK:(0,o.generateWorkdayHoursKey)(s.PK,t),Hours:G});const I=b(s.PK,P);for(const t of I)await o.db.timeslots.put(t)}console.log("Database seeding completed successfully!"),console.log("Seeded ".concat(g.length," organisations, ").concat(u.length," individuals, ").concat(P.length," grants"));const G=await o.db.timeslots.count(),I=await o.db.workdays.count(),p=await o.db.organisations.count();console.log("Generated ".concat(p," organisations, ").concat(I," workday records and ").concat(G," time slot allocations"))}catch(a){throw console.error("Database seeding failed:",a),a}},M=async()=>{try{console.log("Initializing IndexedDB database..."),await o.db.open(),console.log("Database opened successfully");const a=await(async()=>{try{return 0===await o.db.individuals.count()}catch(a){return console.error("Error checking database state:",a),!0}})();if(console.log("Database empty check:",a),a)console.log("Database is empty, auto-seeding..."),await h();else{console.log("Database already contains data, skipping auto-seed");const a={organisations:await o.db.organisations.count(),individuals:await o.db.individuals.count(),grants:await o.db.grants.count(),workdays:await o.db.workdays.count(),workdayHours:await o.db.workdayHours.count(),timeslots:await o.db.timeslots.count()};console.log("Current database counts:",a)}}catch(a){console.error("Database initialization failed:",a),console.log("Attempting to seed database anyway...");try{await h()}catch(t){console.error("Seeding also failed:",t)}}}}}]);
//# sourceMappingURL=903.da915179.chunk.js.map