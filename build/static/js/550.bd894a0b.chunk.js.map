{"version":3,"file":"static/js/550.bd894a0b.chunk.js","mappings":"+MAqBO,SAASA,EAAUC,GACxB,MAAMC,GAAMC,EAAAA,EAAAA,GAAOF,GAAMG,SACzB,OAAe,IAARF,GAAqB,IAARA,CACtB,C,cCTA,MAAMG,EAA4B,CAChC,CACEC,GAAI,UACJC,UAAW,QACXC,SAAU,SACVC,YAAa,KACbC,QAAS,KACTC,YAAa,KAEf,CACEL,GAAI,UACJC,UAAW,QACXC,SAAU,UACVC,YAAa,KACbC,QAAS,KACTC,YAAa,MAEf,CACEL,GAAI,UACJC,UAAW,UACXC,SAAU,OACVC,YAAa,KACbC,QAAS,KACTC,YAAa,OAIXC,EAAkB,CACtB,CACEN,GAAI,QACJO,MAAO,oCACPC,UAAW,aACXC,QAAS,aACTC,cAAe,WAEjB,CACEV,GAAI,QACJO,MAAO,yBACPC,UAAW,aACXC,QAAS,aACTC,cAAe,WAEjB,CACEV,GAAI,QACJO,MAAO,qCACPC,UAAW,aACXC,QAAS,aACTC,cAAe,YAKbC,EAA4BA,CAACC,EAAiBC,KAClD,MAAMC,EAAoC,CAAC,EAQ3C,OAPaC,EAAAA,EAAAA,GAAkB,CAAEC,MAAOJ,EAAWK,IAAKJ,IAEnDK,SAAQtB,IACX,MAAMuB,GAAUC,EAAAA,EAAAA,IAAOxB,EAAK,cAC5BkB,EAASK,IAAYzB,EAAUE,MAG1BkB,GAIHO,EAAgCA,CAACT,EAAiBC,KACtD,MAAMS,EAAgC,CAAC,EAUvC,OATaP,EAAAA,EAAAA,GAAkB,CAAEC,MAAOJ,EAAWK,IAAKJ,IAEnDK,SAAQtB,IACX,MAAMuB,GAAUC,EAAAA,EAAAA,IAAOxB,EAAK,cACvBF,EAAUE,KACb0B,EAAMH,GAAWI,EAAAA,OAIdD,GAIHE,EAAoBA,CAACC,EAAgBX,KACzC,MAAMY,EAAwB,GAsD9B,OArDqBC,OAAOC,KAAKd,GAAUe,QAAOlC,GAAQmB,EAASnB,KAGtDuB,SAAQ,CAACvB,EAAMmC,KAC1B,MAAMC,EAASzB,EAAOuB,QAAOG,GAAKrC,GAAQqC,EAAExB,WAAab,GAAQqC,EAAEvB,UAEnE,GAAsB,IAAlBsB,EAAOE,OAAc,OAGzB,MAAMC,EAAW,CAEf,IAAM,CAAC,CACLC,QAASJ,EAAO,GAAG/B,GACnBoC,QAAS,IACTd,MAAO,IAGT,IAAMS,EAAOE,QAAU,EAAI,CACzB,CAAEE,QAASJ,EAAO,GAAG/B,GAAIoC,QAAS,GAAId,MAAO,KAC7C,CAAEa,QAASJ,EAAO,GAAG/B,GAAIoC,QAAS,GAAId,MAAO,MAC3C,CAAC,CAAEa,QAASJ,EAAO,GAAG/B,GAAIoC,QAAS,IAAKd,MAAO,IAEnD,IAAMS,EAAOE,QAAU,EAAI,CACzB,CAAEE,QAASJ,EAAO,GAAG/B,GAAIoC,QAAS,GAAId,MAAO,GAC7C,CAAEa,QAASJ,EAAO,GAAG/B,GAAIoC,QAAS,GAAId,MAAO,KAC7C,CAAEa,QAASJ,EAAO,GAAG/B,GAAIoC,QAAS,GAAId,MAAO,MAC3C,CAAC,CAAEa,QAASJ,EAAO,GAAG/B,GAAIoC,QAAS,IAAKd,MAAO,IAEnD,IAAM,CAAC,CACLa,QAASJ,EAAO,GAAG/B,GACnBoC,QAAS,GACTd,MAAO,KAMSY,GADEJ,EAAQ,IAAIO,KAAK1C,GAAMG,UAAYoC,EAASD,UAItDf,SAAQoB,IAClBZ,EAAUa,KAAK,CACbvC,GAAIyB,EACJe,IAAIC,EAAAA,EAAAA,qBAAoB9C,EAAM2C,EAAWH,SACzCO,kBAAmBJ,EAAWF,QAC9BO,eAAgBL,EAAWhB,MAC3Be,KAAM1C,EACNiD,QAASN,EAAWH,QACpBU,OAAQpB,UAKPC,GAIIoB,EAAkBC,UAC7B,IACEC,QAAQC,IAAI,sCAGNC,EAAAA,GAAGC,YAAY,KAAM,CAACD,EAAAA,GAAGE,YAAaF,EAAAA,GAAGnB,OAAQmB,EAAAA,GAAGpC,SAAUoC,EAAAA,GAAGG,aAAcH,EAAAA,GAAGI,YAAYP,gBAC5FG,EAAAA,GAAGE,YAAYG,cACfL,EAAAA,GAAGnB,OAAOwB,cACVL,EAAAA,GAAGpC,SAASyC,cACZL,EAAAA,GAAGG,aAAaE,cAChBL,EAAAA,GAAGI,UAAUC,WAIrBP,QAAQC,IAAI,0BACZ,IAAK,MAAMO,KAAczD,QACjBmD,EAAAA,GAAGE,YAAYK,IAAID,GAI3BR,QAAQC,IAAI,qBACZ,IAAK,MAAMS,KAASpD,QACZ4C,EAAAA,GAAGnB,OAAO0B,IAAIC,GAItB,MAAMC,EAAe,IAAItB,KAAK,cACxBuB,GAAaC,EAAAA,EAAAA,GAAWF,GACxBG,EAAe,IAAIzB,KAAK,cACxB0B,GAAaF,EAAAA,EAAAA,GAAWC,GAG9Bd,QAAQC,IAAI,sCACZ,IAAK,MAAMO,KAAczD,EAAa,CAEpC,MAAMiE,EAAkBrD,EAA0BgD,EAAcC,GAC1DK,EAAe5C,EAA8BsC,EAAcC,GAG3DM,EAAkBvD,EAA0BmD,EAAcC,GAC1DI,EAAe9C,EAA8ByC,EAAcC,GAG3DK,GAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQL,GAAoBE,GACvCI,GAAQD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQJ,GAAiBE,SAEjCjB,EAAAA,GAAGpC,SAAS2C,IAAI,CACpBzD,GAAIwD,EAAWxD,GACfwC,IAAI+B,EAAAA,EAAAA,IAAmBf,EAAWxD,GAAI,MACtCwE,SAAUJ,UAGNlB,EAAAA,GAAGG,aAAaI,IAAI,CACxBzD,GAAIwD,EAAWxD,GACfwC,IAAIiC,EAAAA,EAAAA,yBAAwBjB,EAAWxD,GAAI,MAC3C0E,MAAOJ,IAIT,MAAM5C,EAAYF,EAAkBgC,EAAWxD,GAAIoE,GACnD,IAAK,MAAMO,KAAYjD,QACfwB,EAAAA,GAAGI,UAAUG,IAAIkB,EAE3B,CAEA3B,QAAQC,IAAI,4CACZD,QAAQC,IAAI,UAAD2B,OAAW7E,EAAYkC,OAAM,kBAAA2C,OAAiBtE,EAAO2B,OAAM,YAGtE,MAAM4C,QAAuB3B,EAAAA,GAAGI,UAAUwB,QACpCC,QAAsB7B,EAAAA,GAAGpC,SAASgE,QACxC9B,QAAQC,IAAI,aAAD2B,OAAcG,EAAa,yBAAAH,OAAwBC,EAAc,0BAE9E,CAAE,MAAOG,GAEP,MADAhC,QAAQgC,MAAM,2BAA4BA,GACpCA,CACR,GAeWC,EAAqBlC,UAChC,IACEC,QAAQC,IAAI,4CAGNC,EAAAA,GAAGgC,OACTlC,QAAQC,IAAI,gCAEZ,MAAMkC,OAnBqBpC,WAC7B,IAEE,OAA2B,UADGG,EAAAA,GAAGE,YAAY0B,OAE/C,CAAE,MAAOE,GAEP,OADAhC,QAAQgC,MAAM,iCAAkCA,IACzC,CACT,GAYwBI,GAGtB,GAFApC,QAAQC,IAAI,wBAAyBkC,GAEjCA,EACFnC,QAAQC,IAAI,4CACNH,QACD,CACLE,QAAQC,IAAI,sDAEZ,MAAMoC,EAAS,CACbjC,kBAAmBF,EAAAA,GAAGE,YAAY0B,QAClC/C,aAAcmB,EAAAA,GAAGnB,OAAO+C,QACxBhE,eAAgBoC,EAAAA,GAAGpC,SAASgE,QAC5BzB,mBAAoBH,EAAAA,GAAGG,aAAayB,QACpCxB,gBAAiBJ,EAAAA,GAAGI,UAAUwB,SAEhC9B,QAAQC,IAAI,2BAA4BoC,EAC1C,CACF,CAAE,MAAOL,GACPhC,QAAQgC,MAAM,kCAAmCA,GAEjDhC,QAAQC,IAAI,yCACZ,UACQH,GACR,CAAE,MAAOwC,GACPtC,QAAQgC,MAAM,uBAAwBM,EACxC,CACF,E","sources":["../node_modules/date-fns/isWeekend.mjs","db/seedLocalDynamo.ts"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date falls on a weekend\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * const result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\nexport function isWeekend(date) {\n  const day = toDate(date).getDay();\n  return day === 0 || day === 6;\n}\n\n// Fallback for modularized imports:\nexport default isWeekend;\n","import { \n  db, \n  Individual, \n  Grant, \n  Workday, \n  WorkdayHours, \n  TimeSlot,\n  generateWorkdayKey,\n  generateWorkdayHoursKey,\n  generateTimeSlotKey,\n  DEFAULT_WORKDAY_HOURS\n} from './schema';\nimport { format, eachDayOfInterval, isWeekend, startOfMonth, endOfMonth } from 'date-fns';\n\n// Realistic test data\nconst INDIVIDUALS: Individual[] = [\n  {\n    PK: \"U-12345\",\n    FirstName: \"Ellis\",\n    LastName: \"Taylor\",\n    AnnualGross: 48000,\n    Pension: 1450,\n    NationalIns: 5000\n  },\n  {\n    PK: \"U-67890\",\n    FirstName: \"Sarah\",\n    LastName: \"Johnson\",\n    AnnualGross: 52000,\n    Pension: 1560,\n    NationalIns: 5200\n  },\n  {\n    PK: \"U-11111\",\n    FirstName: \"Michael\",\n    LastName: \"Chen\",\n    AnnualGross: 45000,\n    Pension: 1350,\n    NationalIns: 4800\n  }\n];\n\nconst GRANTS: Grant[] = [\n  {\n    PK: \"G-001\",\n    Title: \"Digital Health Innovation Project\",\n    StartDate: \"2024-10-01\",\n    EndDate: \"2025-09-30\",\n    ManagerUserID: \"U-12345\"\n  },\n  {\n    PK: \"G-002\",\n    Title: \"AI Research Initiative\",\n    StartDate: \"2024-12-01\",\n    EndDate: \"2025-11-30\",\n    ManagerUserID: \"U-67890\"\n  },\n  {\n    PK: \"G-003\",\n    Title: \"Sustainable Technology Development\",\n    StartDate: \"2025-01-01\",\n    EndDate: \"2025-12-31\",\n    ManagerUserID: \"U-11111\"\n  }\n];\n\n// Helper function to generate workdays for a date range (excluding weekends)\nconst generateWorkdaysForPeriod = (startDate: Date, endDate: Date): Record<string, boolean> => {\n  const workdays: Record<string, boolean> = {};\n  const days = eachDayOfInterval({ start: startDate, end: endDate });\n  \n  days.forEach(day => {\n    const dateStr = format(day, 'yyyy-MM-dd');\n    workdays[dateStr] = !isWeekend(day);\n  });\n  \n  return workdays;\n};\n\n// Helper function to generate workday hours for a date range\nconst generateWorkdayHoursForPeriod = (startDate: Date, endDate: Date): Record<string, number> => {\n  const hours: Record<string, number> = {};\n  const days = eachDayOfInterval({ start: startDate, end: endDate });\n  \n  days.forEach(day => {\n    const dateStr = format(day, 'yyyy-MM-dd');\n    if (!isWeekend(day)) {\n      hours[dateStr] = DEFAULT_WORKDAY_HOURS;\n    }\n  });\n  \n  return hours;\n};\n\n// Helper function to generate realistic time slot allocations\nconst generateTimeSlots = (userId: string, workdays: Record<string, boolean>): TimeSlot[] => {\n  const timeSlots: TimeSlot[] = [];\n  const workdayDates = Object.keys(workdays).filter(date => workdays[date]);\n  \n  // Generate allocations for each workday\n  workdayDates.forEach((date, index) => {\n    const grants = GRANTS.filter(g => date >= g.StartDate && date <= g.EndDate);\n    \n    if (grants.length === 0) return;\n    \n    // Create realistic allocation patterns\n    const patterns = [\n      // Full day on one grant\n      () => [{\n        grantId: grants[0].PK,\n        percent: 100,\n        hours: 8\n      }],\n      // Split between two grants\n      () => grants.length >= 2 ? [\n        { grantId: grants[0].PK, percent: 60, hours: 4.8 },\n        { grantId: grants[1].PK, percent: 40, hours: 3.2 }\n      ] : [{ grantId: grants[0].PK, percent: 100, hours: 8 }],\n      // Three-way split\n      () => grants.length >= 3 ? [\n        { grantId: grants[0].PK, percent: 50, hours: 4 },\n        { grantId: grants[1].PK, percent: 30, hours: 2.4 },\n        { grantId: grants[2].PK, percent: 20, hours: 1.6 }\n      ] : [{ grantId: grants[0].PK, percent: 100, hours: 8 }],\n      // Partial day (6 hours total)\n      () => [{\n        grantId: grants[0].PK,\n        percent: 75,\n        hours: 6\n      }]\n    ];\n    \n    // Choose pattern based on day of week and index for variety\n    const patternIndex = (index + new Date(date).getDay()) % patterns.length;\n    const allocations = patterns[patternIndex]();\n    \n    // Create time slots\n    allocations.forEach(allocation => {\n      timeSlots.push({\n        PK: userId,\n        SK: generateTimeSlotKey(date, allocation.grantId),\n        AllocationPercent: allocation.percent,\n        HoursAllocated: allocation.hours,\n        Date: date,\n        GrantID: allocation.grantId,\n        UserID: userId\n      });\n    });\n  });\n  \n  return timeSlots;\n};\n\n// Main seeding function\nexport const seedLocalDynamo = async (): Promise<void> => {\n  try {\n    console.log('Starting database seeding...');\n    \n    // Clear existing data\n    await db.transaction('rw', [db.individuals, db.grants, db.workdays, db.workdayHours, db.timeslots], async () => {\n      await db.individuals.clear();\n      await db.grants.clear();\n      await db.workdays.clear();\n      await db.workdayHours.clear();\n      await db.timeslots.clear();\n    });\n    \n    // Seed individuals\n    console.log('Seeding individuals...');\n    for (const individual of INDIVIDUALS) {\n      await db.individuals.put(individual);\n    }\n    \n    // Seed grants\n    console.log('Seeding grants...');\n    for (const grant of GRANTS) {\n      await db.grants.put(grant);\n    }\n    \n    // Generate date ranges for January-February 2025\n    const jan2025Start = new Date('2025-01-01');\n    const jan2025End = endOfMonth(jan2025Start);\n    const feb2025Start = new Date('2025-02-01');\n    const feb2025End = endOfMonth(feb2025Start);\n    \n    // Seed workdays and time slots for each user\n    console.log('Seeding workdays and time slots...');\n    for (const individual of INDIVIDUALS) {\n      // January 2025\n      const jan2025Workdays = generateWorkdaysForPeriod(jan2025Start, jan2025End);\n      const jan2025Hours = generateWorkdayHoursForPeriod(jan2025Start, jan2025End);\n      \n      // February 2025\n      const feb2025Workdays = generateWorkdaysForPeriod(feb2025Start, feb2025End);\n      const feb2025Hours = generateWorkdayHoursForPeriod(feb2025Start, feb2025End);\n      \n      // Merge all workdays and hours for 2025\n      const allWorkdays = { ...jan2025Workdays, ...feb2025Workdays };\n      const allHours = { ...jan2025Hours, ...feb2025Hours };\n      \n      await db.workdays.put({\n        PK: individual.PK,\n        SK: generateWorkdayKey(individual.PK, 2025),\n        Workdays: allWorkdays\n      } as Workday);\n      \n      await db.workdayHours.put({\n        PK: individual.PK,\n        SK: generateWorkdayHoursKey(individual.PK, 2025),\n        Hours: allHours\n      } as WorkdayHours);\n      \n      // Generate time slots\n      const timeSlots = generateTimeSlots(individual.PK, allWorkdays);\n      for (const timeSlot of timeSlots) {\n        await db.timeslots.put(timeSlot);\n      }\n    }\n    \n    console.log('Database seeding completed successfully!');\n    console.log(`Seeded ${INDIVIDUALS.length} individuals, ${GRANTS.length} grants`);\n    \n    // Log summary\n    const totalTimeSlots = await db.timeslots.count();\n    const totalWorkdays = await db.workdays.count();\n    console.log(`Generated ${totalWorkdays} workday records and ${totalTimeSlots} time slot allocations`);\n    \n  } catch (error) {\n    console.error('Database seeding failed:', error);\n    throw error;\n  }\n};\n\n// Function to check if database needs seeding\nexport const isDatabaseEmpty = async (): Promise<boolean> => {\n  try {\n    const individualCount = await db.individuals.count();\n    return individualCount === 0;\n  } catch (error) {\n    console.error('Error checking database state:', error);\n    return true;\n  }\n};\n\n// Auto-seed on first load\nexport const initializeDatabase = async (): Promise<void> => {\n  try {\n    console.log('Initializing IndexedDB database...');\n\n    // Ensure database is open\n    await db.open();\n    console.log('Database opened successfully');\n\n    const isEmpty = await isDatabaseEmpty();\n    console.log('Database empty check:', isEmpty);\n\n    if (isEmpty) {\n      console.log('Database is empty, auto-seeding...');\n      await seedLocalDynamo();\n    } else {\n      console.log('Database already contains data, skipping auto-seed');\n      // Log current counts for debugging\n      const counts = {\n        individuals: await db.individuals.count(),\n        grants: await db.grants.count(),\n        workdays: await db.workdays.count(),\n        workdayHours: await db.workdayHours.count(),\n        timeslots: await db.timeslots.count(),\n      };\n      console.log('Current database counts:', counts);\n    }\n  } catch (error) {\n    console.error('Database initialization failed:', error);\n    // Try to seed anyway\n    console.log('Attempting to seed database anyway...');\n    try {\n      await seedLocalDynamo();\n    } catch (seedError) {\n      console.error('Seeding also failed:', seedError);\n    }\n  }\n};\n"],"names":["isWeekend","date","day","toDate","getDay","INDIVIDUALS","PK","FirstName","LastName","AnnualGross","Pension","NationalIns","GRANTS","Title","StartDate","EndDate","ManagerUserID","generateWorkdaysForPeriod","startDate","endDate","workdays","eachDayOfInterval","start","end","forEach","dateStr","format","generateWorkdayHoursForPeriod","hours","DEFAULT_WORKDAY_HOURS","generateTimeSlots","userId","timeSlots","Object","keys","filter","index","grants","g","length","patterns","grantId","percent","Date","allocation","push","SK","generateTimeSlotKey","AllocationPercent","HoursAllocated","GrantID","UserID","seedLocalDynamo","async","console","log","db","transaction","individuals","workdayHours","timeslots","clear","individual","put","grant","jan2025Start","jan2025End","endOfMonth","feb2025Start","feb2025End","jan2025Workdays","jan2025Hours","feb2025Workdays","feb2025Hours","allWorkdays","_objectSpread","allHours","generateWorkdayKey","Workdays","generateWorkdayHoursKey","Hours","timeSlot","concat","totalTimeSlots","count","totalWorkdays","error","initializeDatabase","open","isEmpty","isDatabaseEmpty","counts","seedError"],"sourceRoot":""}